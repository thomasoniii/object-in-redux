{"version":3,"sources":["utils.js","actions/layer.js","selectors/layer.js","components/Layers.js","actions/types.js","components/AddLayer.js","components/LayerDetail.js","components/SerializeStore.js","actions/store.js","App.js","serviceWorker.js","reducers/layers.js","reducers/index.js","sagas/index.js","index.js"],"names":["explain","concat","this","name","color","magnitude","LayerObj","_ref","layer_id","isObj","next_id","getLayers","state","layers","layerComparator","a","b","getSortedLayers","createSelector","Object","values","sort","getSelectedLayer","find","layer","selected","getLayerObjects","reduce","l","Layer","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","selectLayer","bind","assertThisInitialized","deleteLayer","window","confirm","react_default","createElement","className","onClick","PureComponent","Layers","_this$props","map","Layers_Layer","key","connect","payload","type","INIT","AddLayer","updateName","updateColor","updateMagnitude","addLayer","addLayerBadly","e","setState","target","value","onChange","_ref2","LayerDetail","results","_this$props$layer","layerObj","NOT","Fragment","selectedLayer","layerObjects","undefined","SerializeStore","serializeStore","App","src_components_SerializeStore","src_components_AddLayer","src_components_Layers","src_components_LayerDetail","Component","Boolean","location","hostname","match","INITIAL","combineReducers","arguments","length","action","objectSpread","defineProperty","newState","string","JSON","stringify","parse","rootSaga","regenerator_default","wrap","_context","prev","next","all","stop","_marked","__webpack_require__","d","__webpack_exports__","store","sagaMiddleware","createSagaMiddleware","applyMiddleware","createStore","createStoreWithMiddleware","reducers","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWAAA,SAASA,IACP,SAAAC,OAAUC,KAAKC,KAAf,QAAAF,OAA0BC,KAAKE,MAA/B,QAAAH,OAA2CC,KAAKG,WAG3C,SAASC,EAATC,GAAwD,IAApCC,EAAoCD,EAApCC,SAAUL,EAA0BI,EAA1BJ,KAAMC,EAAoBG,EAApBH,MAAOC,EAAaE,EAAbF,UAUhD,OARAH,KAAKM,SAAWA,EAChBN,KAAKC,KAAOA,EACZD,KAAKE,MAAQA,EACbF,KAAKG,UAAYA,EACjBH,KAAKO,OAAQ,EAEbP,KAAKF,QAAUA,EAERE,KCLT,IAAIQ,EAAU,UCLDC,EAAY,SAAAC,GAAK,OAAIA,EAAMC,QAElCC,EAAkB,SAACC,EAAEC,GAAH,OAASA,EAAID,GAExBE,EAAkBC,YAC7B,CAACP,GACD,SAACE,GACC,OAAOM,OAAOC,OAAOP,GAAQQ,KAAKP,KAIzBQ,EAAmBJ,YAC9B,CAACP,GACD,SAACE,GACC,OAAOM,OAAOC,OAAOP,GAAQU,KAAM,SAAAC,GAAK,OAAIA,EAAMC,aAIzCC,EAAkBR,YAC7B,CAACP,GACD,SAACE,GACC,OAAOM,OAAOC,OAAOP,GAAQc,OAAQ,SAACd,EAAQe,GAI5C,OAHAf,EAAOe,EAAEpB,UAAYoB,EAAEnB,MACnBmB,EACA,IAAItB,EAASsB,GACVf,GACN,MCrBDgB,qBAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAZ,OAAAa,EAAA,EAAAb,CAAAjB,KAAA2B,IACjBE,EAAAZ,OAAAc,EAAA,EAAAd,CAAAjB,KAAAiB,OAAAe,EAAA,EAAAf,CAAAU,GAAAM,KAAAjC,KAAM4B,KAEDM,YAAcL,EAAKK,YAAYC,KAAjBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAY,KACnBA,EAAKQ,YAAcR,EAAKQ,YAAYF,KAAjBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAY,KAJFA,6EASjB7B,KAAK4B,MAAMM,YAAYlC,KAAK4B,MAAMN,MAAMhB,gDAIxC,IAAMA,EAAWN,KAAK4B,MAAMN,MAAMhB,SAC9BgC,OAAOC,QAAP,uBAAAxC,OAAsCO,KACxCN,KAAK4B,MAAMS,YAAY/B,oCAIjB,IACAgB,EAAWtB,KAAK4B,MAAhBN,MACR,OACEkB,EAAA3B,EAAA4B,cAAA,MAAIC,UAAS,SAAA3C,OAAWuB,EAAMC,UAAY,WAA7B,KAAAxB,OAA2CuB,EAAMf,MAAQ,MAAQ,QAAUoC,QAAS3C,KAAKkC,aACpGM,EAAA3B,EAAA4B,cAAA,uBAAgBnB,EAAMhB,UACtBkC,EAAA3B,EAAA4B,cAAA,UAAQE,QAAS3C,KAAKqC,aAAtB,aA1BYO,kBAgCdC,mLAEK,IAAAC,EACsC9C,KAAK4B,MAA1CjB,EADDmC,EACCnC,OAAQuB,EADTY,EACSZ,YAAaG,EADtBS,EACsBT,YAC7B,OACEG,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,UACV/B,EAAOoC,IAAK,SAAArB,GAAC,OAAIc,EAAA3B,EAAA4B,cAACO,EAAD,CAAOC,IAAKvB,EAAEpB,SAAUgB,MAAOI,EAAGQ,YAAaA,EAAaG,YAAaA,cAN/EO,iBAkBNM,cANS,SAAAxC,GACtB,MAAO,CACLC,OAASI,EAAgBL,KAIW,CAAEwB,YFhBf,SAAC5B,GAC1B,MAAO,CACL6C,QAAU7C,EACV8C,KGxC2B,iBDqDwBf,YFvB5B,SAAC/B,GAC1B,MAAO,CACL6C,QAAU7C,EACV8C,KGnC2B,kBDuDhBF,CAAuDL,GEpDhEQ,SAAO,CACXpD,KAAY,YACZC,MAAY,aACZC,UAAY,IAGRmD,cAIJ,SAAAA,EAAY1B,GAAO,IAAAC,EAAA,OAAAZ,OAAAa,EAAA,EAAAb,CAAAjB,KAAAsD,IACjBzB,EAAAZ,OAAAc,EAAA,EAAAd,CAAAjB,KAAAiB,OAAAe,EAAA,EAAAf,CAAAqC,GAAArB,KAAAjC,KAAM4B,KAHRlB,MAAQ2C,EAKNxB,EAAK0B,WAAkB1B,EAAK0B,WAAWpB,KAAhBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAY,KACvBA,EAAK2B,YAAkB3B,EAAK2B,YAAYrB,KAAjBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAY,KACvBA,EAAK4B,gBAAkB5B,EAAK4B,gBAAgBtB,KAArBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAY,KAEvBA,EAAK6B,SAAkB7B,EAAK6B,SAASvB,KAAdlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAY,KACvBA,EAAK8B,cAAkB9B,EAAK8B,cAAcxB,KAAnBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAY,KARNA,0EAWR+B,GACT5D,KAAK6D,SAAS,CAAC5D,KAAO2D,EAAEE,OAAOC,4CAGrBH,GACV5D,KAAK6D,SAAS,CAAC3D,MAAQ0D,EAAEE,OAAOC,gDAGlBH,GACd5D,KAAK6D,SAAS,CAAC1D,UAAYyD,EAAEE,OAAOC,2CAIpC/D,KAAK4B,MAAM8B,SAAU1D,KAAKU,OAC1BV,KAAK6D,SAASR,2CAIdrD,KAAK4B,MAAM+B,cAAe3D,KAAKU,OAC/BV,KAAK6D,SAASR,oCAId,OACEb,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACbF,EAAA3B,EAAA4B,cAAA,qBACAD,EAAA3B,EAAA4B,cAAA,SAAOW,KAAO,OAAOW,MAAS/D,KAAKU,MAAMT,KAAM+D,SAAUhE,KAAKuD,aAC9Df,EAAA3B,EAAA4B,cAAA,sBACAD,EAAA3B,EAAA4B,cAAA,SAAOW,KAAO,OAAOW,MAAS/D,KAAKU,MAAMR,MAAO8D,SAAUhE,KAAKwD,cAC/DhB,EAAA3B,EAAA4B,cAAA,0BACAD,EAAA3B,EAAA4B,cAAA,SAAOW,KAAO,SAASW,MAAS/D,KAAKU,MAAMP,UAAW6D,SAAUhE,KAAKyD,kBACrEjB,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,cAAcC,QAAS3C,KAAK0D,UAA9C,aACAlB,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,aAAaC,QAAS3C,KAAK2D,eAA7C,2BA/Cef,iBAqDRM,cAAQ,KAAM,CAACQ,SJ5CN,SAAArD,GAA8B,IAA5BJ,EAA4BI,EAA5BJ,KAAMC,EAAsBG,EAAtBH,MAAOC,EAAeE,EAAfF,UACrC,MAAO,CACLgD,QAAU,CAAE7C,WAAaE,EAASP,OAAMC,QAAOC,aAC/CiD,KGzB2B,cCkESO,cJrCX,SAAAM,GAA8B,IAA5BhE,EAA4BgE,EAA5BhE,KAAMC,EAAsB+D,EAAtB/D,MAAOC,EAAe8D,EAAf9D,UAC1C,MAAO,CACLgD,QAAU,IAAI/C,EAAS,CAAEE,WAAaE,EAASP,OAAMC,QAAOC,cAC5DiD,KG9B2B,qBCgEhBF,CAAyCI,GC1DlDY,oNAEJxD,MAAQ,CACNyD,QAAU,8EAGH,IAAArB,EAE+B9C,KAAK4B,MAFpCwC,EAAAtB,EAECxB,aAFD,IAAA8C,EAES,GAFTA,EAGC9D,GAHDwC,EAEauB,SACyB/C,EAArChB,UAAUL,EAA2BqB,EAA3BrB,KAAMC,EAAqBoB,EAArBpB,MAAOC,EAAcmB,EAAdnB,UAEzBmE,EAAMhD,EAAMf,MAAQ,MAAQ,GAElC,OACEiC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,gBACXpC,GACAkC,EAAA3B,EAAA4B,cAACD,EAAA3B,EAAM0D,SAAP,KACE/B,EAAA3B,EAAA4B,cAAA,yBAAsBD,EAAA3B,EAAA4B,cAAA,YAAOnC,GAC7BkC,EAAA3B,EAAA4B,cAAA,qBAAkBD,EAAA3B,EAAA4B,cAAA,YAAOxC,GACzBuC,EAAA3B,EAAA4B,cAAA,sBAAmBD,EAAA3B,EAAA4B,cAAA,YAAOvC,GAC1BsC,EAAA3B,EAAA4B,cAAA,0BAAuBD,EAAA3B,EAAA4B,cAAA,YAAOtC,GAC9BqC,EAAA3B,EAAA4B,cAAA,8BACAD,EAAA3B,EAAA4B,cAAA,YAAOnB,EAAMxB,WACb0C,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,SAAhB,kBACkB4B,EADlB,0BAEWA,EAFX,qEAvBc1B,kBAqDXM,cAZS,SAACxC,GACvB,IAAM8D,EAAgBpD,EAAiBV,GACjC+D,EAAejD,EAAgBd,GAKrC,MAAO,CACLY,MAJYkD,EACVC,EAAaD,EAAclE,eAC3BoE,IAMSxB,CAAyBgB,GCtDlCS,0LAEF,OACEnC,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,yBAAyBC,QAAS3C,KAAK4B,MAAMgD,gBAA/D,0BAHuBhC,kBAYdM,cAJS,SAACxC,GACvB,MAAO,IAG+B,CAAEkE,eCjBZ,WAC5B,MAAO,CACLxB,KJI2B,qBGWhBF,CAA6CyB,GEiB7CE,0LAzBX,OACErC,EAAA3B,EAAA4B,cAACD,EAAA3B,EAAM0D,SAAP,KACE/B,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,SACZF,EAAA3B,EAAA4B,cAAA,gHACAD,EAAA3B,EAAA4B,cAAA,gLAEAD,EAAA3B,EAAA4B,cAAA,gIAEAD,EAAA3B,EAAA4B,cAAA,6NAEAD,EAAA3B,EAAA4B,cAAA,iHACAD,EAAA3B,EAAA4B,cAAA,wOAGFD,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACbF,EAAA3B,EAAA4B,cAACqC,EAAD,MACAtC,EAAA3B,EAAA4B,cAACsC,EAAD,MACAvC,EAAA3B,EAAA4B,cAACuC,EAAD,MACAxC,EAAA3B,EAAA4B,cAACwC,EAAD,eApBQC,cCGEC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,+FCVAC,EAAU,GCJDC,cAAgB,CAC7B7E,ODaa,WAA6B,IAA5BD,EAA4B+E,UAAAC,OAAA,QAAAhB,IAAAe,UAAA,GAAAA,UAAA,GAApBF,EAASI,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAf,EAC1C,OAAOiB,EAAOvC,MACZ,IPpB2B,YOqB3B,IPnB2B,kBOoBzB,OAAOnC,OAAA2E,EAAA,EAAA3E,CAAA,GACFP,EADLO,OAAA4E,EAAA,EAAA5E,CAAA,GAEG0E,EAAOxC,QAAQ7C,SAAYqF,EAAOxC,UAEvC,IPtB2B,eOuBzB,IAAM7C,EAAWqF,EAAOxC,QAClB2C,EAAQ7E,OAAA2E,EAAA,EAAA3E,CAAA,GAAOP,GAErB,cADOoF,EAASxF,GACTwF,EAET,IP1B2B,eO2BzB,IAAMxF,EAAWqF,EAAOxC,QACxB,OAAOlC,OAAOC,OAAOR,GAAOe,OAAQ,SAACqE,EAAUxE,GAS7C,OARIA,EAAMC,WACRD,EAAKL,OAAA2E,EAAA,EAAA3E,CAAA,GAAQK,EAAR,CAAeC,UAAW,KAE7BD,EAAMhB,WAAaA,IACrBgB,EAAKL,OAAA2E,EAAA,EAAA3E,CAAA,GAAQK,EAAR,CAAeC,UAAW,KAGjCuE,EAASxE,EAAMhB,UAAYgB,EACpBwE,GACN,IAEL,IPtC2B,kBOuCzB,IAAMC,EAASC,KAAKC,UAAUvF,GAC9B,OAAOsF,KAAKE,MAAMH,GAEpB,QACE,OAAOrF,0CEjDYyF,GAAV,SAAUA,IAAV,OAAAC,EAAAvF,EAAAwF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACb,OADaF,EAAAE,KAAA,EACPC,YAAI,IADG,wBAAAH,EAAAI,SAAAC,GCFfC,EAAAC,EAAAC,EAAA,0BAAAC,IAaA,IAAMC,EAAiBC,cAIVF,EAFqBG,YAAgBF,EAAhBE,CAAgCC,IAE7CC,CAA0BC,EAAU/E,OAAOgF,8BAAgChF,OAAOgF,gCAEvGN,EAAeO,IAAIpB,GAEnBqB,IAASC,OACPjF,EAAA3B,EAAA4B,cAACiF,EAAA,EAAD,CAAUX,MAAOA,GACfvE,EAAA3B,EAAA4B,cAACkF,EAAD,OAEFC,SAASC,eAAe,SJwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0d102f87.chunk.js","sourcesContent":["function explain() {\n  return `${this.name} is ${this.color} of ${this.magnitude}`;\n}\n\nexport function LayerObj({ layer_id, name, color, magnitude }) {\n\n  this.layer_id = layer_id;\n  this.name = name;\n  this.color = color;\n  this.magnitude = magnitude;\n  this.isObj = true;\n\n  this.explain = explain;\n\n  return this;\n}\n","import {\n  ADD_LAYER,\n  ADD_LAYER_BADLY,\n  DELETE_LAYER,\n  SELECT_LAYER\n} from './types';\n\nimport { LayerObj } from '../utils';\n\nlet next_id = 0;\n\n/* okay, this is the gist of the concept. It's straightforward. I think the issue\n   is trying to store a function in redux (as evidenced by the addLayerBadly call),\n   so all we need to do is *not* put the initialized object into redux and instead\n   instantiate it when it's loaded.\n\n   addLayer here just passes through the data to the reducer.\n   addLayerBadly will create an object first, and then hand that into the reducer.\n\n   Take a look at the LayerDetail.js component next.\n*/\n\nexport const addLayer = ({name, color, magnitude}) => {\n  return {\n    payload : { layer_id : ++next_id, name, color, magnitude },\n    type    : ADD_LAYER\n  }\n}\n\nexport const addLayerBadly = ({name, color, magnitude}) => {\n  return {\n    payload : new LayerObj({ layer_id : ++next_id, name, color, magnitude }),\n    type    : ADD_LAYER_BADLY\n  }\n}\n\nexport const deleteLayer = (layer_id) => {\n  return {\n    payload : layer_id,\n    type    : DELETE_LAYER\n  }\n}\n\nexport const selectLayer = (layer_id) => {\n  return {\n    payload : layer_id,\n    type    : SELECT_LAYER\n  }\n}\n","import { createSelector } from 'reselect';\n\nimport { LayerObj } from '../utils';\n\nexport const getLayers = state => state.layers;\n\nconst layerComparator = (a,b) => b - a;\n\nexport const getSortedLayers = createSelector(\n  [getLayers],\n  (layers) => {\n    return Object.values(layers).sort(layerComparator)\n  }\n)\n\nexport const getSelectedLayer = createSelector(\n  [getLayers],\n  (layers) => {\n    return Object.values(layers).find( layer => layer.selected )\n  }\n)\n\nexport const getLayerObjects = createSelector(\n  [getLayers],\n  (layers) => {\n    return Object.values(layers).reduce( (layers, l) => {\n      layers[l.layer_id] = l.isObj\n        ? l\n        : new LayerObj(l);\n      return layers;\n    }, {})\n  }\n)\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { deleteLayer, selectLayer } from '../actions';\n\nimport { getSortedLayers } from '../selectors';\n\nimport './Layers.css';\n\nclass Layer extends PureComponent {\n\n  constructor(props) {\n    super(props);\n\n    this.selectLayer = this.selectLayer.bind(this);\n    this.deleteLayer = this.deleteLayer.bind(this);\n\n  }\n\n  selectLayer() {\n    this.props.selectLayer(this.props.layer.layer_id);\n  }\n\n  deleteLayer() {\n    const layer_id = this.props.layer.layer_id;\n    if (window.confirm(`Really delete layer ${layer_id}`)) {\n      this.props.deleteLayer(layer_id)\n    }\n  }\n\n  render () {\n    const { layer }  = this.props;\n    return (\n      <li className={`layer ${layer.selected && 'selected'} ${layer.isObj ? 'bad' : 'good'}`} onClick={this.selectLayer}>\n        <span>Layer : { layer.layer_id }</span>\n        <button onClick={this.deleteLayer}>X</button>\n      </li>\n    )\n  }\n}\n\nclass Layers extends PureComponent {\n\n  render() {\n    const { layers, selectLayer, deleteLayer } = this.props;\n    return (\n      <ul className='layers'>\n        { layers.map( l => <Layer key={l.layer_id} layer={l} selectLayer={selectLayer} deleteLayer={deleteLayer} /> ) }\n      </ul>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    layers : getSortedLayers(state),\n  }\n}\n\nexport default connect(mapStateToProps, { selectLayer, deleteLayer })(Layers);\n","export const ADD_LAYER       = 'ADD_LAYER';\n\nexport const ADD_LAYER_BADLY = 'ADD_LAYER_BADLY';\n\nexport const DELETE_LAYER    = 'DELETE_LAYER';\n\nexport const SELECT_LAYER    = 'SELECT_LAYER';\n\nexport const SERIALIZE_STORE = 'SERIALIZE_STORE';\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { addLayer, addLayerBadly } from '../actions';\n\nimport './AddLayer.css';\n\nconst INIT = {\n  name      : 'some name',\n  color     : 'some color',\n  magnitude : 0\n}\n\nclass AddLayer extends PureComponent {\n\n  state = INIT\n\n  constructor(props) {\n    super(props);\n\n    this.updateName      = this.updateName.bind(this);\n    this.updateColor     = this.updateColor.bind(this);\n    this.updateMagnitude = this.updateMagnitude.bind(this);\n\n    this.addLayer        = this.addLayer.bind(this);\n    this.addLayerBadly   = this.addLayerBadly.bind(this);\n  }\n\n  updateName(e) {\n    this.setState({name : e.target.value});\n  }\n\n  updateColor(e) {\n    this.setState({color : e.target.value});\n  }\n\n  updateMagnitude(e) {\n    this.setState({magnitude : e.target.value});\n  }\n\n  addLayer() {\n    this.props.addLayer( this.state )\n    this.setState(INIT)\n  }\n\n  addLayerBadly() {\n    this.props.addLayerBadly( this.state )\n    this.setState(INIT)\n  }\n\n  render() {\n    return (\n      <div className='add-layer'>\n        <span>Name:</span>\n        <input type = 'text' value = {this.state.name} onChange={this.updateName} />\n        <span>Color:</span>\n        <input type = 'text' value = {this.state.color} onChange={this.updateColor} />\n        <span>Magnitude:</span>\n        <input type = 'number' value = {this.state.magnitude} onChange={this.updateMagnitude} />\n        <button className='good-button' onClick={this.addLayer}>Add layer</button>\n        <button className='bad-button' onClick={this.addLayerBadly}>add layer badly</button>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, {addLayer, addLayerBadly})(AddLayer);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getSelectedLayer, getLayerObjects } from '../selectors';\n\nimport { LayerObj } from '../utils';\n\nimport './LayerDetail.css';\n\nclass LayerDetail extends PureComponent {\n\n  state = {\n    results : null\n  }\n\n  render() {\n\n    const { layer = {}, layerObj = {} } = this.props;\n    const { layer_id, name, color, magnitude } = layer;\n\n    const NOT = layer.isObj ? 'NOT' : '';\n\n    return (\n      <div className='layer-detail'>\n        { layer_id &&\n          <React.Fragment>\n            <span>Layer ID:</span><span>{layer_id}</span>\n            <span>Name:</span><span>{name}</span>\n            <span>Color:</span><span>{color}</span>\n            <span>Magnitude:</span><span>{magnitude}</span>\n            <span>Function call:</span>\n            <span>{layer.explain()}</span>\n            <span className='notes'>\n              This object is {NOT} serializable.\n              You can {NOT} select this object after the store has been serialized.\n            </span>\n          </React.Fragment>\n        }\n      </div>\n    )\n  }\n}\n\n/* This is straightforward - it uses a selector to get the currently selected layer, and\n   it also gets a list of all layer objects via a separate selector. Then, if we have a\n   selected layer, it'll get the instantiated object. This code doesn't care if the object\n   is in redux or was created after the fact - it works trasparently either way.\n\n*/\n\nconst mapStateToProps = (state) => {\n  const selectedLayer = getSelectedLayer(state);\n  const layerObjects = getLayerObjects(state);\n\n  const layer = selectedLayer\n    ? layerObjects[selectedLayer.layer_id]\n    : undefined\n  return {\n    layer\n  }\n}\n\nexport default connect(mapStateToProps)(LayerDetail)\n","import React, {PureComponent} from 'react';\nimport { connect } from 'react-redux';\n\nimport { serializeStore } from '../actions';\n\nimport './SerializeStore.css'\n\nclass SerializeStore extends PureComponent {\n  render() {\n    return (\n      <button className='serialize-store-button' onClick={this.props.serializeStore}>Serialize store</button>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {}\n}\n\nexport default connect(mapStateToProps, { serializeStore })(SerializeStore);\n","import { SERIALIZE_STORE } from './types';\n\nexport const serializeStore = () => {\n  return {\n    type : SERIALIZE_STORE\n  }\n}\n","import React, { Component } from 'react';\n\nimport Layers from './components/Layers';\nimport AddLayer from './components/AddLayer';\nimport LayerDetail from './components/LayerDetail';\nimport SerializeStore from './components/SerializeStore';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <ul className='notes'>\n          <li>Simple little POC. Fill in some data (or just leave as is) and click the \"Add Layer badly\" button.</li>\n          <li>Then you can select the layer in the list below, and details about it will appear. You can see\n          that the last item in the details is the result of a function call.</li>\n          <li>Click the \"Serialize store\" button and the whole app will break, because the functions referenced no\n          longer exist.</li>\n          <li>Reload the page. Do the same steps, but this time click the \"Add Layer\" button. You'll see that all\n          functionality is identical, including the function calls on the data. But these objects can be serialized.</li>\n          <li>You can also add objects in both ways, and see that some break after serialization and some do not.</li>\n          <li>Also of note - the app will not break until you serialize the store AND select a layer which was added\n          before serializing. The app will work as long as it isn't selected, or if you select an object before serializing.</li>\n        </ul>\n        <div className=\"App\">\n          <SerializeStore />\n          <AddLayer />\n          <Layers />\n          <LayerDetail />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ADD_LAYER,\n  ADD_LAYER_BADLY,\n  DELETE_LAYER,\n  SELECT_LAYER,\n  SERIALIZE_STORE\n} from '../actions/types';\n\nconst INITIAL = {};\n\n/* as you can see, the logic for adding a layer or adding one badly is identical.\n   It passes through either the data structure or the instantiated object and stores it.\n\n   But if you choose to serialize the store, the SERIALIZE_STORE action will simply\n   turn the store into a string and then back into an object, breaking those functions\n   on the inside.\n*/\n\nexport default (state = INITIAL, action) => {\n  switch(action.type) {\n    case ADD_LAYER :\n    case ADD_LAYER_BADLY :\n      return {\n        ...state,\n        [action.payload.layer_id] : action.payload\n      }\n    case DELETE_LAYER : {\n      const layer_id = action.payload;\n      const newState = {...state};\n      delete newState[layer_id];\n      return newState;\n    }\n    case SELECT_LAYER : {\n      const layer_id = action.payload;\n      return Object.values(state).reduce( (newState, layer) => {\n        if (layer.selected) {\n          layer = { ...layer, selected : false }\n        };\n        if (layer.layer_id === layer_id) {\n          layer = { ...layer, selected : true }\n        }\n\n        newState[layer.layer_id] = layer;\n        return newState;\n      }, {})\n    }\n    case SERIALIZE_STORE : {\n      const string = JSON.stringify(state);\n      return JSON.parse(string);\n    }\n    default :\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport layers from './layers';\n\nexport default combineReducers({\n  layers\n})\n","import { all } from 'redux-saga/effects';\n\nexport default function* rootSaga() {\n  yield all([\n\n  ])\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducers from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst createStoreWithMiddleware = applyMiddleware(sagaMiddleware)(createStore);\n\nexport const store = createStoreWithMiddleware(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nsagaMiddleware.run(rootSaga)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}